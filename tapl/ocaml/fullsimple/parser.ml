type token =
  | TYPE of (Support.Error.info)
  | INERT of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | AS of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 77 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* TYPE *);
  258 (* INERT *);
  259 (* IF *);
  260 (* THEN *);
  261 (* ELSE *);
  262 (* TRUE *);
  263 (* FALSE *);
  264 (* BOOL *);
  265 (* CASE *);
  266 (* OF *);
  267 (* AS *);
  268 (* LAMBDA *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* USTRING *);
  274 (* UNIT *);
  275 (* UUNIT *);
  276 (* TIMESFLOAT *);
  277 (* UFLOAT *);
  278 (* SUCC *);
  279 (* PRED *);
  280 (* ISZERO *);
  281 (* NAT *);
  282 (* UCID *);
  283 (* LCID *);
  284 (* INTV *);
  285 (* FLOATV *);
  286 (* STRINGV *);
  287 (* APOSTROPHE *);
  288 (* DQUOTE *);
  289 (* ARROW *);
  290 (* BANG *);
  291 (* BARGT *);
  292 (* BARRCURLY *);
  293 (* BARRSQUARE *);
  294 (* COLON *);
  295 (* COLONCOLON *);
  296 (* COLONEQ *);
  297 (* COLONHASH *);
  298 (* COMMA *);
  299 (* DARROW *);
  300 (* DDARROW *);
  301 (* DOT *);
    0 (* EOF *);
  302 (* EQ *);
  303 (* EQEQ *);
  304 (* EXISTS *);
  305 (* GT *);
  306 (* HASH *);
  307 (* LCURLY *);
  308 (* LCURLYBAR *);
  309 (* LEFTARROW *);
  310 (* LPAREN *);
  311 (* LSQUARE *);
  312 (* LSQUAREBAR *);
  313 (* LT *);
  314 (* RCURLY *);
  315 (* RPAREN *);
  316 (* RSQUARE *);
  317 (* SEMI *);
  318 (* SLASH *);
  319 (* STAR *);
  320 (* TRIANGLE *);
  321 (* USCORE *);
  322 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\005\000\005\000\006\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\004\000\004\000\009\000\009\000\010\000\010\000\011\000\
\011\000\007\000\007\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\015\000\015\000\014\000\014\000\014\000\017\000\
\017\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\013\000\013\000\019\000\018\000\
\018\000\020\000\020\000\021\000\021\000\000\000"

let yylen = "\002\000\
\001\000\003\000\001\000\002\000\002\000\002\000\002\000\001\000\
\003\000\001\000\001\000\003\000\001\000\001\000\003\000\001\000\
\001\000\000\000\002\000\000\000\001\000\001\000\003\000\003\000\
\001\000\003\000\001\000\001\000\006\000\004\000\006\000\006\000\
\006\000\006\000\008\000\001\000\002\000\002\000\003\000\002\000\
\002\000\002\000\003\000\001\000\003\000\003\000\001\000\001\000\
\003\000\003\000\004\000\001\000\001\000\007\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\003\000\007\000\000\000\
\001\000\001\000\003\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\052\000\053\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\059\000\056\000\001\000\000\000\000\000\
\000\000\070\000\000\000\003\000\000\000\000\000\047\000\000\000\
\000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\005\000\000\000\069\000\000\000\065\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\013\000\014\000\016\000\017\000\010\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\006\000\007\000\000\000\058\000\
\000\000\000\000\050\000\000\000\002\000\045\000\046\000\043\000\
\000\000\025\000\000\000\021\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\068\000\067\000\049\000\000\000\000\000\015\000\
\000\000\009\000\012\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\023\000\029\000\
\000\000\062\000\031\000\032\000\033\000\034\000\000\000\000\000\
\000\000\000\000\054\000\000\000\035\000\000\000\000\000"

let yydgoto = "\002\000\
\026\000\027\000\028\000\048\000\051\000\098\000\074\000\075\000\
\099\000\100\000\101\000\029\000\108\000\030\000\031\000\032\000\
\058\000\054\000\109\000\055\000\056\000"

let yysindex = "\010\000\
\001\000\000\000\215\254\235\001\000\000\000\000\235\001\233\254\
\239\254\051\002\000\255\000\000\051\002\051\002\051\002\051\002\
\238\254\244\254\000\000\000\000\000\000\000\000\019\002\235\001\
\002\255\000\000\225\254\000\000\051\002\242\254\000\000\021\255\
\059\000\000\000\029\255\026\255\255\254\003\255\248\254\250\254\
\242\254\005\255\038\002\242\254\242\254\242\254\059\000\000\000\
\059\000\235\001\000\000\254\254\000\000\243\254\000\000\007\255\
\246\254\249\254\010\255\001\000\242\254\245\254\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\002\059\000\090\002\
\001\255\000\000\020\255\235\001\006\255\059\000\059\000\235\001\
\235\001\059\000\242\254\000\000\000\000\000\000\235\001\000\000\
\019\002\235\001\000\000\235\001\000\000\000\000\000\000\000\000\
\022\255\000\000\004\255\000\000\017\255\009\255\015\255\000\000\
\059\000\060\255\043\255\000\000\012\255\028\255\030\255\057\255\
\065\255\034\255\000\000\000\000\000\000\032\255\059\000\000\000\
\090\002\000\000\000\000\000\000\235\001\036\255\006\255\235\001\
\235\001\235\001\235\001\235\001\073\255\000\000\000\000\000\000\
\063\255\000\000\000\000\000\000\000\000\000\000\082\255\059\000\
\038\255\235\001\000\000\055\255\000\000\141\001\051\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\039\255\217\255\000\000\000\000\000\000\000\000\044\255\000\000\
\000\000\000\000\000\000\000\000\171\255\032\000\000\000\150\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\148\000\206\000\008\001\000\000\000\000\
\000\000\000\000\000\000\182\001\000\000\000\000\000\000\045\255\
\047\255\000\000\000\000\000\000\066\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\255\000\000\058\255\
\000\000\000\000\087\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\222\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\192\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\255"

let yygindex = "\000\000\
\048\000\000\000\252\255\000\000\000\000\232\255\004\000\000\000\
\038\000\246\255\000\000\218\255\242\255\248\255\000\000\000\000\
\028\000\000\000\000\000\030\000\000\000"

let yytablesize = 915
let yytable = "\035\000\
\022\000\041\000\036\000\037\000\043\000\044\000\045\000\046\000\
\073\000\039\000\001\000\063\000\063\000\033\000\022\000\094\000\
\095\000\063\000\053\000\057\000\061\000\063\000\084\000\022\000\
\085\000\049\000\042\000\047\000\059\000\060\000\062\000\063\000\
\076\000\050\000\083\000\077\000\078\000\080\000\096\000\081\000\
\079\000\038\000\082\000\087\000\088\000\086\000\102\000\040\000\
\089\000\063\000\090\000\091\000\105\000\110\000\111\000\092\000\
\063\000\114\000\121\000\119\000\104\000\120\000\107\000\123\000\
\125\000\063\000\063\000\122\000\063\000\126\000\130\000\106\000\
\128\000\063\000\129\000\112\000\113\000\127\000\131\000\132\000\
\133\000\137\000\115\000\144\000\053\000\057\000\148\000\118\000\
\027\000\145\000\027\000\027\000\027\000\027\000\134\000\146\000\
\027\000\027\000\150\000\018\000\027\000\064\000\066\000\020\000\
\027\000\048\000\020\000\093\000\124\000\103\000\135\000\151\000\
\138\000\027\000\027\000\027\000\027\000\117\000\116\000\147\000\
\136\000\000\000\000\000\139\000\140\000\141\000\142\000\143\000\
\027\000\000\000\000\000\027\000\027\000\000\000\000\000\027\000\
\000\000\027\000\000\000\000\000\027\000\149\000\061\000\027\000\
\027\000\027\000\027\000\027\000\000\000\000\000\000\000\044\000\
\027\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\000\000\000\000\044\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\028\000\
\044\000\044\000\044\000\044\000\028\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\044\000\061\000\061\000\000\000\044\000\000\000\
\044\000\061\000\000\000\044\000\000\000\061\000\044\000\044\000\
\044\000\000\000\044\000\000\000\028\000\000\000\000\000\044\000\
\000\000\000\000\055\000\028\000\000\000\000\000\055\000\055\000\
\000\000\000\000\000\000\055\000\028\000\028\000\000\000\028\000\
\000\000\061\000\055\000\000\000\000\000\000\000\000\000\000\000\
\061\000\000\000\000\000\055\000\055\000\055\000\055\000\000\000\
\000\000\061\000\061\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\003\000\004\000\000\000\055\000\005\000\006\000\
\000\000\007\000\000\000\055\000\008\000\009\000\055\000\010\000\
\011\000\055\000\012\000\000\000\013\000\055\000\014\000\015\000\
\016\000\000\000\017\000\018\000\019\000\020\000\021\000\000\000\
\000\000\036\000\000\000\036\000\036\000\036\000\036\000\000\000\
\000\000\036\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\036\000\000\000\023\000\000\000\000\000\024\000\000\000\
\000\000\025\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\065\000\000\000\066\000\000\000\067\000\
\036\000\000\000\036\000\068\000\069\000\036\000\000\000\000\000\
\036\000\036\000\036\000\038\000\036\000\038\000\038\000\038\000\
\038\000\036\000\000\000\038\000\000\000\000\000\000\000\038\000\
\000\000\000\000\000\000\038\000\000\000\070\000\000\000\000\000\
\071\000\000\000\000\000\072\000\038\000\038\000\038\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\038\000\000\000\000\000\038\000\
\000\000\000\000\038\000\038\000\038\000\040\000\038\000\040\000\
\040\000\040\000\040\000\038\000\000\000\040\000\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\040\000\000\000\
\000\000\040\000\000\000\000\000\040\000\040\000\040\000\041\000\
\040\000\041\000\041\000\041\000\041\000\040\000\000\000\041\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\041\000\000\000\000\000\041\000\000\000\000\000\041\000\041\000\
\041\000\042\000\041\000\042\000\042\000\042\000\042\000\041\000\
\000\000\042\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\042\000\042\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\042\000\000\000\000\000\042\000\000\000\000\000\
\042\000\042\000\042\000\037\000\042\000\037\000\037\000\037\000\
\037\000\042\000\000\000\037\000\000\000\000\000\000\000\037\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\037\000\037\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\037\000\000\000\000\000\037\000\
\000\000\000\000\037\000\037\000\037\000\039\000\037\000\039\000\
\039\000\039\000\039\000\037\000\000\000\039\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\039\000\003\000\000\000\
\000\000\000\000\005\000\006\000\000\000\000\000\039\000\039\000\
\039\000\039\000\000\000\010\000\000\000\000\000\012\000\000\000\
\013\000\000\000\014\000\015\000\016\000\039\000\000\000\034\000\
\019\000\020\000\021\000\000\000\039\000\000\000\039\000\000\000\
\000\000\039\000\000\000\000\000\039\000\039\000\039\000\055\000\
\039\000\000\000\000\000\055\000\055\000\039\000\000\000\023\000\
\055\000\000\000\024\000\000\000\000\000\025\000\000\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\055\000\003\000\004\000\055\000\055\000\
\005\000\006\000\000\000\007\000\000\000\000\000\008\000\009\000\
\000\000\010\000\011\000\000\000\012\000\000\000\013\000\000\000\
\014\000\015\000\016\000\000\000\000\000\034\000\019\000\020\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\004\000\000\000\000\000\
\005\000\006\000\000\000\007\000\000\000\023\000\008\000\009\000\
\024\000\010\000\011\000\025\000\012\000\000\000\013\000\003\000\
\014\000\015\000\016\000\005\000\006\000\052\000\019\000\020\000\
\021\000\000\000\000\000\000\000\003\000\000\000\000\000\012\000\
\005\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\019\000\020\000\021\000\012\000\023\000\000\000\000\000\
\024\000\000\000\000\000\025\000\000\000\034\000\019\000\020\000\
\021\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\024\000\000\000\000\000\025\000\000\000\
\000\000\064\000\000\000\000\000\000\000\023\000\000\000\000\000\
\024\000\000\000\065\000\025\000\066\000\000\000\067\000\000\000\
\000\000\000\000\068\000\069\000\097\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\000\000\000\000\071\000\
\000\000\000\000\072\000"

let yycheck = "\004\000\
\000\000\010\000\007\000\027\001\013\000\014\000\015\000\016\000\
\033\000\027\001\001\000\004\001\005\001\055\001\049\001\027\001\
\028\001\010\001\023\000\024\000\029\000\014\001\047\000\058\001\
\049\000\038\001\027\001\046\001\027\001\061\001\045\001\011\001\
\004\001\046\001\043\000\010\001\038\001\046\001\063\000\046\001\
\038\001\065\001\038\001\046\001\058\001\050\000\071\000\065\001\
\042\001\042\001\061\001\059\001\033\001\078\000\079\000\046\001\
\049\001\082\000\042\001\038\001\060\001\058\001\057\001\049\001\
\005\001\058\001\059\001\059\001\061\001\027\001\014\001\076\000\
\045\001\066\001\045\001\080\000\081\000\066\001\014\001\046\001\
\049\001\046\001\087\000\011\001\089\000\090\000\049\001\092\000\
\002\001\027\001\004\001\005\001\006\001\007\001\119\000\014\001\
\010\001\011\001\044\001\061\001\014\001\058\001\058\001\058\001\
\018\001\059\001\049\001\060\000\105\000\072\000\121\000\150\000\
\127\000\027\001\028\001\029\001\030\001\090\000\089\000\144\000\
\125\000\255\255\255\255\128\000\129\000\130\000\131\000\132\000\
\042\001\255\255\255\255\045\001\046\001\255\255\255\255\049\001\
\255\255\051\001\255\255\255\255\054\001\146\000\151\000\057\001\
\058\001\059\001\060\001\061\001\255\255\255\255\255\255\002\001\
\066\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\004\001\005\001\
\027\001\028\001\029\001\030\001\010\001\255\255\255\255\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\045\001\004\001\005\001\255\255\049\001\255\255\
\051\001\010\001\255\255\054\001\255\255\014\001\057\001\058\001\
\059\001\255\255\061\001\255\255\042\001\255\255\255\255\066\001\
\255\255\255\255\002\001\049\001\255\255\255\255\006\001\007\001\
\255\255\255\255\255\255\011\001\058\001\059\001\255\255\061\001\
\255\255\042\001\018\001\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\058\001\059\001\255\255\061\001\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\045\001\006\001\007\001\
\255\255\009\001\255\255\051\001\012\001\013\001\054\001\015\001\
\016\001\057\001\018\001\255\255\020\001\061\001\022\001\023\001\
\024\001\255\255\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\002\001\255\255\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\018\001\255\255\051\001\255\255\255\255\054\001\255\255\
\255\255\057\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\017\001\255\255\019\001\255\255\021\001\
\049\001\255\255\051\001\025\001\026\001\054\001\255\255\255\255\
\057\001\058\001\059\001\002\001\061\001\004\001\005\001\006\001\
\007\001\066\001\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\018\001\255\255\051\001\255\255\255\255\
\054\001\255\255\255\255\057\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\051\001\255\255\255\255\054\001\
\255\255\255\255\057\001\058\001\059\001\002\001\061\001\004\001\
\005\001\006\001\007\001\066\001\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\051\001\255\255\
\255\255\054\001\255\255\255\255\057\001\058\001\059\001\002\001\
\061\001\004\001\005\001\006\001\007\001\066\001\255\255\010\001\
\255\255\255\255\255\255\014\001\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\255\255\
\051\001\255\255\255\255\054\001\255\255\255\255\057\001\058\001\
\059\001\002\001\061\001\004\001\005\001\006\001\007\001\066\001\
\255\255\010\001\255\255\255\255\255\255\014\001\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\051\001\255\255\255\255\054\001\255\255\255\255\
\057\001\058\001\059\001\002\001\061\001\004\001\005\001\006\001\
\007\001\066\001\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\051\001\255\255\255\255\054\001\
\255\255\255\255\057\001\058\001\059\001\002\001\061\001\004\001\
\005\001\006\001\007\001\066\001\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\018\001\002\001\255\255\
\255\255\255\255\006\001\007\001\255\255\255\255\027\001\028\001\
\029\001\030\001\255\255\015\001\255\255\255\255\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\042\001\255\255\027\001\
\028\001\029\001\030\001\255\255\049\001\255\255\051\001\255\255\
\255\255\054\001\255\255\255\255\057\001\058\001\059\001\002\001\
\061\001\255\255\255\255\006\001\007\001\066\001\255\255\051\001\
\011\001\255\255\054\001\255\255\255\255\057\001\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\054\001\002\001\003\001\057\001\058\001\
\006\001\007\001\255\255\009\001\255\255\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\255\255\020\001\255\255\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\003\001\255\255\255\255\
\006\001\007\001\255\255\009\001\255\255\051\001\012\001\013\001\
\054\001\015\001\016\001\057\001\018\001\255\255\020\001\002\001\
\022\001\023\001\024\001\006\001\007\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\002\001\255\255\255\255\018\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\018\001\051\001\255\255\255\255\
\054\001\255\255\255\255\057\001\255\255\027\001\028\001\029\001\
\030\001\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\051\001\255\255\255\255\054\001\255\255\255\255\057\001\255\255\
\255\255\008\001\255\255\255\255\255\255\051\001\255\255\255\255\
\054\001\255\255\017\001\057\001\019\001\255\255\021\001\255\255\
\255\255\255\255\025\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\255\255\255\255\054\001\
\255\255\255\255\057\001"

let yynames_const = "\
  "

let yynames_block = "\
  TYPE\000\
  INERT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  CASE\000\
  OF\000\
  AS\000\
  LAMBDA\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  USTRING\000\
  UNIT\000\
  UUNIT\000\
  TIMESFLOAT\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  NAT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 124 "parser.mly"
      ( fun ctx -> [],ctx )
# 561 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 126 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 573 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 134 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 580 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 136 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 588 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 138 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 596 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 143 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 604 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 145 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 612 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 150 "parser.mly"
                ( _1 )
# 619 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 155 "parser.mly"
           ( _2 )
# 628 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 157 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 639 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 163 "parser.mly"
      ( fun ctx -> TyBool )
# 646 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 165 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 656 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 168 "parser.mly"
      ( fun ctx -> TyString )
# 663 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 170 "parser.mly"
      ( fun ctx -> TyUnit )
# 670 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 172 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 680 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 175 "parser.mly"
      ( fun ctx -> TyFloat )
# 687 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 177 "parser.mly"
      ( fun ctx -> TyNat )
# 694 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
      ( fun ctx -> TyVarBind )
# 700 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 183 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 708 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
      ( fun ctx i -> [] )
# 714 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 189 "parser.mly"
      ( _1 )
# 721 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 728 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 195 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 737 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 199 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 746 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 201 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 753 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 207 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 762 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 209 "parser.mly"
            ( _1 )
# 769 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 213 "parser.mly"
      ( _1 )
# 776 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 215 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 788 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 217 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 799 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 220 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 813 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 224 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 827 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 228 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 839 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 230 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 851 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 232 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 868 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 239 "parser.mly"
      ( _1 )
# 875 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 241 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 886 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 895 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 249 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 904 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 251 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 912 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 253 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 920 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 928 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 937 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 261 "parser.mly"
      ( _1 )
# 944 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 954 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 268 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 964 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 271 "parser.mly"
      ( _1 )
# 971 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 275 "parser.mly"
      ( _1 )
# 978 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 988 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 283 "parser.mly"
      ( _2 )
# 997 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 285 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1007 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 287 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1014 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 289 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1021 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1035 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 294 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1043 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 297 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1050 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 299 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1057 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 301 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1067 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 304 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1074 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 306 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1085 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 314 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1092 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 316 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1101 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 320 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1116 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "parser.mly"
      ( fun ctx i -> [] )
# 1122 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 328 "parser.mly"
      ( _1 )
# 1129 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 332 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1136 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1145 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 338 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1154 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1161 "parser.ml"
               : 'Field))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
